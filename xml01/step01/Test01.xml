<?xml version="1.0"?>
<!-- 주석 -->
<!-- 
 => XML?
    - 이기종 시스템 간에 데이터를 전송할 때 사용한다.
    - 데이터를 구조화하는 용도로 사용한다.
    - 데이터 구조화의 이점?
      . 데이터를 추출하기 편하다.
      . 특별한 애플리케이션에 의존하지 않고도 데이터를 읽을 수 있다.
      
      예1) 약간의 구조화 데이터: CSV(Comma Seperated Value)
      홍길동, 100, 40, 30
      임꺽정, 20, 80, 100
      유관순, 100, 100, 100
      
      예2) 데이터의 의미를 부여하자.
      이름:홍길동,국어:100,수학:40,영어:30
      이름:임꺽정,국어:100,수학:40,영어:30
      이름:유관순,국어:100,수학:40,영어:30
      
      예3) 복잡한 데이터 => 프로그램에서 데이터를 추출하기가 번거롭다.
      전체이름:성(홍)이름(길동),점수:국어(100),수학(40),영어(30)
      전체이름:성(임)이름(꺽정),점수:국어(100),수학(40),영어(30)
      전체이름:성(홍)이름(길동),점수:국어(100),수학(40),영어(30)
      
    - 해결책
      . 태그를 이용하여 데이터와 메타데이터를 구분한다.
      . DTD, Schema를 이용하여 데이터를 구조를 정의하고, 올바른지 검사할 수 있다.
      . XSL을 이용하여 데이터를 변환할 수 있다.
      
    - 단점
      . 데이터보다 메타데이터가 더 커지는 문제가 발생. => 대신 읽기가 쉽고, 데이터 추출이 쉽다.
 -->
 
 <scores>
   <score>
     <name>
       <first-name>길동</first-name>
       <last-name>홍</last-name>
     </name>
     <kor>100</kor>
     <math>90</math>
     <eng>100</eng>
   </score>
   
   <score>
     <name>
       <first-name>꺽정</first-name>
       <last-name>임</last-name>
     </name>
     <kor>100</kor>
     <math>90</math>
     <eng>100</eng>
   </score>
 </scores>
 
 
 
 
 
 
 
 
 
 